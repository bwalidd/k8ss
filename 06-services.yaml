# 06-services.yaml
# All Kubernetes Services - Fixed Version

# Django Backend GPU Services (Individual GPU endpoints)
---
apiVersion: v1
kind: Service
metadata:
  name: backend-gpu0-service
  namespace: face-recognition-system
  labels:
    gpu-id: "gpu0"
    service-type: "direct-gpu"
spec:
  selector:
    app: django-backend
    gpu-id: "gpu0"
  ports:
  - protocol: TCP
    port: 9898
    targetPort: 9898
    nodePort: 30801
    name: http
  type: NodePort
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 300  # Reduced from 3600 to 5 minutes

---
apiVersion: v1
kind: Service
metadata:
  name: backend-gpu1-service
  namespace: face-recognition-system
  labels:
    gpu-id: "gpu1"
    service-type: "direct-gpu"
spec:
  selector:
    app: django-backend
    gpu-id: "gpu1"
  ports:
  - protocol: TCP
    port: 9898
    targetPort: 9898
    nodePort: 30802
    name: http
  type: NodePort
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: backend-gpu2-service
  namespace: face-recognition-system
  labels:
    gpu-id: "gpu2"
    service-type: "direct-gpu"
spec:
  selector:
    app: django-backend
    gpu-id: "gpu2"
  ports:
  - protocol: TCP
    port: 9898
    targetPort: 9898
    nodePort: 30803
    name: http
  type: NodePort
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: backend-gpu3-service
  namespace: face-recognition-system
  labels:
    gpu-id: "gpu3"
    service-type: "direct-gpu"
spec:
  selector:
    app: django-backend
    gpu-id: "gpu3"
  ports:
  - protocol: TCP
    port: 9898
    targetPort: 9898
    nodePort: 30804
    name: http
  type: NodePort
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 300

---
# Main Backend Load Balancer (Discovery and Health Checks)
apiVersion: v1
kind: Service
metadata:
  name: backend-loadbalancer-service
  namespace: face-recognition-system
  labels:
    service-type: "discovery-loadbalancer"
spec:
  selector:
    app: django-backend
  ports:
  - protocol: TCP
    port: 9898
    targetPort: 9898
    nodePort: 30898
    name: http
  type: NodePort

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: face-recognition-system
  labels:
    component: frontend
spec:
  selector:
    app: react-frontend
  ports:
  - protocol: TCP
    port: 9999
    targetPort: 9999
    nodePort: 30999
    name: http
  type: NodePort

---
# MediaMTX Services (Fixed port conflicts)
apiVersion: v1
kind: Service
metadata:
  name: mediamtx-primary-service
  namespace: face-recognition-system
  labels:
    component: streaming
    instance: primary
spec:
  selector:
    app: mediamtx
    instance: primary
  ports:
  - protocol: TCP
    port: 8554
    targetPort: 8554  # Primary uses port 8554
    nodePort: 30554
    name: rtsp
  type: NodePort

---
apiVersion: v1
kind: Service
metadata:
  name: mediamtx-secondary-service
  namespace: face-recognition-system
  labels:
    component: streaming
    instance: secondary
spec:
  selector:
    app: mediamtx
    instance: secondary
  ports:
  - protocol: TCP
    port: 8554
    targetPort: 8555  # Secondary uses port 8555 internally
    nodePort: 30555
    name: rtsp
  type: NodePort

---
apiVersion: v1
kind: Service
metadata:
  name: mediamtx-normal-service
  namespace: face-recognition-system
  labels:
    component: streaming
    instance: normal
spec:
  selector:
    app: mediamtx
    instance: normal
  ports:
  - protocol: TCP
    port: 8554
    targetPort: 8556  # Normal uses port 8556 internally
    nodePort: 30556
    name: rtsp
  type: NodePort

---
# TensorBoard Services for GPU Monitoring
apiVersion: v1
kind: Service
metadata:
  name: tensorboard-gpu0-service
  namespace: face-recognition-system
  labels:
    component: monitoring
    gpu-id: "gpu0"
spec:
  selector:
    app: django-backend
    gpu-id: "gpu0"
  ports:
  - protocol: TCP
    port: 6006
    targetPort: 6006
    nodePort: 30606
    name: tensorboard
  type: NodePort

---
apiVersion: v1
kind: Service
metadata:
  name: tensorboard-gpu1-service
  namespace: face-recognition-system
  labels:
    component: monitoring
    gpu-id: "gpu1"
spec:
  selector:
    app: django-backend
    gpu-id: "gpu1"
  ports:
  - protocol: TCP
    port: 6006
    targetPort: 6006
    nodePort: 30607
    name: tensorboard
  type: NodePort

---
apiVersion: v1
kind: Service
metadata:
  name: tensorboard-gpu2-service
  namespace: face-recognition-system
  labels:
    component: monitoring
    gpu-id: "gpu2"
spec:
  selector:
    app: django-backend
    gpu-id: "gpu2"
  ports:
  - protocol: TCP
    port: 6006
    targetPort: 6006
    nodePort: 30608
    name: tensorboard
  type: NodePort

---
apiVersion: v1
kind: Service
metadata:
  name: tensorboard-gpu3-service
  namespace: face-recognition-system
  labels:
    component: monitoring
    gpu-id: "gpu3"
spec:
  selector:
    app: django-backend
    gpu-id: "gpu3"
  ports:
  - protocol: TCP
    port: 6006
    targetPort: 6006
    nodePort: 30609
    name: tensorboard
  type: NodePort

---
# Jupyter Services for GPU Development
apiVersion: v1
kind: Service
metadata:
  name: jupyter-gpu0-service
  namespace: face-recognition-system
  labels:
    component: development
    gpu-id: "gpu0"
spec:
  selector:
    app: django-backend
    gpu-id: "gpu0"
  ports:
  - protocol: TCP
    port: 8888
    targetPort: 8888
    nodePort: 30888
    name: jupyter
  type: NodePort

---
apiVersion: v1
kind: Service
metadata:
  name: jupyter-gpu1-service
  namespace: face-recognition-system
  labels:
    component: development
    gpu-id: "gpu1"
spec:
  selector:
    app: django-backend
    gpu-id: "gpu1"
  ports:
  - protocol: TCP
    port: 8888
    targetPort: 8888
    nodePort: 30889
    name: jupyter
  type: NodePort

---
apiVersion: v1
kind: Service
metadata:
  name: jupyter-gpu2-service
  namespace: face-recognition-system
  labels:
    component: development
    gpu-id: "gpu2"
spec:
  selector:
    app: django-backend
    gpu-id: "gpu2"
  ports:
  - protocol: TCP
    port: 8888
    targetPort: 8888
    nodePort: 30890
    name: jupyter
  type: NodePort

---
apiVersion: v1
kind: Service
metadata:
  name: jupyter-gpu3-service
  namespace: face-recognition-system
  labels:
    component: development
    gpu-id: "gpu3"
spec:
  selector:
    app: django-backend
    gpu-id: "gpu3"
  ports:
  - protocol: TCP
    port: 8888
    targetPort: 8888
    nodePort: 30891
    name: jupyter
  type: NodePort

---
# Celery Monitor Service (Flower)
apiVersion: v1
kind: Service
metadata:
  name: celery-monitor-service
  namespace: face-recognition-system
  labels:
    component: monitoring
spec:
  selector:
    app: celery-worker
  ports:
  - protocol: TCP
    port: 5555
    targetPort: 5555
    nodePort: 30557
    name: flower
  type: NodePort

---
# Internal Database Services (ClusterIP - Secure)
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: face-recognition-system
  labels:
    component: database
spec:
  selector:
    app: postgresql
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
    name: postgres
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: redis-primary-service
  namespace: face-recognition-system
  labels:
    component: cache
    instance: primary
spec:
  selector:
    app: redis-primary
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
    name: redis
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: redis-channels-service
  namespace: face-recognition-system
  labels:
    component: cache
    instance: channels
spec:
  selector:
    app: redis-channels
  ports:
  - protocol: TCP
    port: 6380
    targetPort: 6380
    name: redis-channels
  type: ClusterIP

---
# External Database Access (Only for Development/Admin - Remove in Production)
apiVersion: v1
kind: Service
metadata:
  name: postgres-external-service
  namespace: face-recognition-system
  labels:
    component: database
    access-type: external
  annotations:
    kubernetes.io/description: "External PostgreSQL access - Remove in production"
spec:
  selector:
    app: postgresql
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
    nodePort: 30432
    name: postgres-external
  type: NodePort

---
apiVersion: v1
kind: Service
metadata:
  name: redis-external-service
  namespace: face-recognition-system
  labels:
    component: cache
    access-type: external
  annotations:
    kubernetes.io/description: "External Redis access - Remove in production"
spec:
  selector:
    app: redis-primary
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
    nodePort: 30379
    name: redis-external
  type: NodePort

---
apiVersion: v1
kind: Service
metadata:
  name: redis-channels-external-service
  namespace: face-recognition-system
  labels:
    component: cache
    access-type: external
  annotations:
    kubernetes.io/description: "External Redis Channels access - Remove in production"
spec:
  selector:
    app: redis-channels
  ports:
  - protocol: TCP
    port: 6380
    targetPort: 6380
    nodePort: 30380
    name: redis-channels-external
  type: NodePort